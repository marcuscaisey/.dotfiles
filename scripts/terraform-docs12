#!/usr/bin/env python

import pathlib
import re
import subprocess
import sys
import tempfile
from typing import Generator, Iterable, List, Sequence, Tuple


class Patterns:
    """Named regex patterns used to parse lines of Terraform."""

    arg_type_pair = r'(?:(?<={|,)\s*|^\s*)(\w+)\s*(?:=|:)\s*([\w()\s]+?)\s*(?=}|,|\n)'
    arg_value = r'(?<==).+'
    type_definition = r'\s*type( |=)'
    variable_output_block = r'^\s*(variable|output)\s*"\w+"\s*{\s*$'
    whitespace = r'\s+'


def main(args: Sequence[str]) -> None:
    """`terraform-docs v0.6.0` is not compatible with Terraform 0.12 code.
    Therefore convert the files at the paths given as arguments to
    `terraform-docs12` to Terraform 0.11 syntax, save them in a temporary
    directory, and then run `terraform-docs` on those files with same options
    provided to `terraform-docs12`.
    """
    first_path_index = get_first_path_index(args)
    paths = map(pathlib.Path, args[first_path_index:])

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_paths = []

        for path in paths:
            if path.is_file():
                output = temp_dir / path
                temp_paths.append(str(output))
                convert_file(path, output)

            elif path.is_dir():
                for subpath in path.iterdir():
                    if subpath.is_file() and not subpath.name.startswith('.'):
                        output = temp_dir / subpath
                        output.parent.mkdir(parents=True, exist_ok=True)
                        temp_paths.append(str(output))
                        convert_file(subpath, output)

        new_args = (*args[:first_path_index], *temp_paths)
        subprocess.call(['terraform-docs', *new_args])


def get_first_path_index(args: Sequence[str]) -> int:
    """Return the index of the first path in the list of arguments (assumed
    to the first element which isn't a documented option/argument).
    """
    index = 0
    try:
        while args[index].startswith('-'):
            index += 1
        for pattern in ('json|markdown|md', 'document|table'):
            if re.match(pattern, args[index]):
                index += 1
    except IndexError:
        return index

    return index


def convert_file(file: pathlib.Path, output: pathlib.Path) -> None:
    """Convert `file` into Terraform 0.11 compatible syntax and save it in
    `output`.
    """
    with file.open() as f, output.open('w') as g:
        g.writelines(convert_lines(f))


# FIXME: Add parsing of single line variables
def convert_lines(lines: Iterable[str]) -> Generator[str, None, None]:
    """Return a generator which yields `lines` converted into Terraform 0.11
    compatible syntax.

    The conversions which need to be made are as follows:
        - All types need to be quoted
        - Object literals given as types need to be converted to a single line
        - Default values of null need to be quoted

    Note:
        The logic of this parsing is loosely based on that used in a cytopia's
        script which does a similar thing but doesn't preserve all lines or
        object type information:
        https://github.com/cytopia/docker-terraform-docs/blob/master/data/terraform-docs.awk.
    """
    variable_output_block_brace_count = 0
    object_block_bracket_count = 0
    for line in lines:
        converted_line = ''

        if variable_output_block_brace_count:
            variable_output_block_brace_count += line.count('')

            if re.match(Patterns.type_definition, line):
                match = re.search(Patterns.arg_value, line)
                if match:
                    type_ = re.sub(Patterns.whitespace, '', match.group(0))
                    if 'object' not in type_:
                        converted_line = f'type = "{type_}"\n'
                    else:
                        object_block_bracket_count += line.count('(')
                        arg_types: List[Tuple[str, str]] = []

            if re.sub(Patterns.whitespace, '', line) == 'default=null':
                converted_line = 'default = "null"\n'

            if object_block_bracket_count:
                arg_types += re.findall(Patterns.arg_type_pair, line)
                object_block_bracket_count -= line.count(')')
                if not object_block_bracket_count:
                    args = ', '.join(f'{arg}: {type_.replace(" ", "")}' for arg, type_ in arg_types)
                    converted_line = f'type = "object({{ {args} }})"\n'

            variable_output_block_brace_count -= line.count('')

        if re.match(Patterns.variable_output_block, line):
            variable_output_block_brace_count = 1

        if not object_block_bracket_count and not converted_line:
            converted_line = line

        yield converted_line


if __name__ == '__main__':
    args = sys.argv[1:]
    main(args)
