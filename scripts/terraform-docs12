#!/usr/bin/env bash

# This script runs terraform-docs on Terraform 0.12 variables/outputs files
# which are incompatible with terraform-docs v0.6.0 by converting them into a
# legacy format first.

# This awk script is a modified version of the script at
# https://github.com/cloudposse/build-harness/blob/master/bin/terraform-docs.awk
# which converts Terraform 0.12 variables/outputs to something suitable for
# terraform-docs. It's modified to print the structure of objects with type =
# object, rather than just object. I.e. object({ name = string, age = number })
# instead of just object.
# FIXME: object structure is only picked up when it's defined on one line
TERRAFORM_DOCS_AWK='
{
  if ( $0 ~ /\{/ ) {
    braceCnt++
  }

  if ( $0 ~ /\}/ ) {
    braceCnt--
  }

  # [START] variable or output block started
  if ($0 ~ /^[[:space:]]*(variable|output)[[:space:]][[:space:]]*"(.*?)"/) {
    # Normalize the braceCnt (should be 1 now)
    braceCnt = 1
    # [CLOSE] "default" block
    if (blockDefCnt > 0) {
      blockDefCnt = 0
    }
    blockCnt++
    print $0
  }

  # [START] multiline default statement started
  if (blockCnt > 0) {
    if ($0 ~ /^[[:space:]][[:space:]]*(default)[[:space:]][[:space:]]*=/) {
      if ($3 ~ "null") {
        print "  default = \"null\""
      } else {
        print $0
        blockDefCnt++
        blockDefStart=1
      }
    }
  }

  # [PRINT] single line "description"
  if (blockCnt > 0) {
    if (blockDefCnt == 0) {
      if ($0 ~ /^[[:space:]][[:space:]]*description[[:space:]][[:space:]]*=/) {
        # [CLOSE] "default" block
        if (blockDefCnt > 0) {
          blockDefCnt = 0
        }
        print $0
      }
    }
  }

  # [PRINT] single line "type"
  if (blockCnt > 0) {
    if ($0 ~ /^[[:space:]][[:space:]]*type[[:space:]][[:space:]]*=/ ) {
      # [CLOSE] "default" block
      if (blockDefCnt > 0) {
        blockDefCnt = 0
      }
      type=$3
      if (type ~ "object") {
          printf "  type = \""; for (i = 3; i < NF; i++) printf $i  " "; printf $NF; print "\""
      } else {
          # legacy quoted types: "string", "list", and "map"
          if ($3 ~ /^[[:space:]]*"(.*?)"[[:space:]]*$/) {
            print "  type = " $3
          } else {
            print "  type = \"" $3 "\""
          }
      }
    }
  }

  # [CLOSE] variable/output block
  if (blockCnt > 0) {
    if (braceCnt == 0 && blockCnt > 0) {
      blockCnt--
      print $0
    }
  }

  # [PRINT] Multiline "default" statement
  if (blockCnt > 0 && blockDefCnt > 0) {
    if (blockDefStart == 1) {
      blockDefStart = 0
    } else {
      print $0
    }
  }
}
'

options=()
paths=()

for arg in $@; do
    if [ -f $arg ]; then
        paths+=($arg)
    elif [ -d $arg ]; then
        paths+=$(find $arg -type f -maxdepth 1)
    else
        options+=($arg)
    fi
done

if [ ${#paths[@]} -gt 0 ]; then
    terraform-docs ${options[@]} <(cat ${paths[@]} | awk "$TERRAFORM_DOCS_AWK")
else
    terraform-docs ${options[@]}
fi

